/**
 * 4-bit ripple carry adder constructed using full adders.
 * Author: Naga Kandasamy
 * Date created: June 29, 2020
 * Date modified: September 12, 2021
 * 
 * Student name(s): Noah Robinson
 * Date modified: 6/30/23
 */

CHIP RippleCarryAdder4 {
    IN x[4], y[4], cin;     // 4-bit inputs
    OUT z[4], cout;         // 4-bit output, 1 carry out bit

    PARTS: 
    // FIXME: provide your solution
    
    // FA0
    Xor(a=x[0], b=y[0], out=FA0temp1);
    Xor(a=FA0temp1, b=cin, out=z[0]);
    And(a=x[0], b=y[0], out=FA0temp2);
    And(a=FA0temp1, b=cin, out=FA0temp3);
    Or(a=FA0temp2, b=FA0temp3, out=cout0);

    // FA1
    Xor(a=x[1], b=y[1], out=FA1temp1);
    Xor(a=FA1temp1, b=cout0, out=z[1]);
    And(a=x[1], b=y[1], out=FA1temp2);
    And(a=FA1temp1, b=cout0, out=FA1temp3);
    Or(a=FA1temp2, b=FA1temp3, out=cout1);

    // FA2
    Xor(a=x[2], b=y[2], out=FA2temp1);
    Xor(a=FA2temp1, b=cout1, out=z[2]);
    And(a=x[2], b=y[2], out=FA2temp2);
    And(a=FA2temp1, b=cout1, out=FA2temp3);
    Or(a=FA2temp2, b=FA2temp3, out=cout2);

    // FA3
    Xor(a=x[3], b=y[3], out=FA3temp1);
    Xor(a=FA3temp1, b=cout2, out=z[3]);
    And(a=x[3], b=y[3], out=FA3temp2);
    And(a=FA3temp1, b=cout2, out=FA3temp3);
    Or(a=FA3temp2, b=FA3temp3, out=cout);
}